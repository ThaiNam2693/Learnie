// <auto-generated />
using System;
using LearnieService.LearnieDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LearnieService.Migrations
{
    [DbContext(typeof(LearnieDatabaseContext))]
    [Migration("20241104184759_DatabaseInit")]
    partial class DatabaseInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LearnieService.Models.Answer", b =>
                {
                    b.Property<int>("AnswerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerID"));

                    b.Property<int>("AnswerContent")
                        .HasColumnType("int");

                    b.Property<bool>("IsRightAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("AnswerID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("LearnieService.Models.Note", b =>
                {
                    b.Property<int>("NoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteID"));

                    b.Property<string>("NoteContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionSetID")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NoteID");

                    b.HasIndex("QuestionSetID");

                    b.HasIndex("UserID");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("LearnieService.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LearnieService.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<string>("QuestionContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionSetID")
                        .HasColumnType("int");

                    b.HasKey("QuestionID");

                    b.HasIndex("QuestionSetID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LearnieService.Models.QuestionSet", b =>
                {
                    b.Property<int>("QuestionSetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionSetID"));

                    b.Property<DateOnly>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<string>("QuestSetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("QuestionSetID");

                    b.HasIndex("UserID");

                    b.ToTable("QuestionSets");
                });

            modelBuilder.Entity("LearnieService.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Subcription")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("SubcriptionExpiredAt")
                        .HasColumnType("date");

                    b.Property<DateOnly>("SubcriptionStartAt")
                        .HasColumnType("date");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("UserEmail")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LearnieService.Models.Answer", b =>
                {
                    b.HasOne("LearnieService.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LearnieService.Models.Note", b =>
                {
                    b.HasOne("LearnieService.Models.QuestionSet", "QuestionSet")
                        .WithMany("Note")
                        .HasForeignKey("QuestionSetID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearnieService.Models.User", null)
                        .WithMany("Notes")
                        .HasForeignKey("UserID");

                    b.Navigation("QuestionSet");
                });

            modelBuilder.Entity("LearnieService.Models.Order", b =>
                {
                    b.HasOne("LearnieService.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearnieService.Models.Question", b =>
                {
                    b.HasOne("LearnieService.Models.QuestionSet", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSetID");
                });

            modelBuilder.Entity("LearnieService.Models.QuestionSet", b =>
                {
                    b.HasOne("LearnieService.Models.User", "CreatedBy")
                        .WithMany("QuestionSets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("LearnieService.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LearnieService.Models.QuestionSet", b =>
                {
                    b.Navigation("Note");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LearnieService.Models.User", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Orders");

                    b.Navigation("QuestionSets");
                });
#pragma warning restore 612, 618
        }
    }
}
